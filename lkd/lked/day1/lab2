ex1:  Allocate 1024 bytes of kernel buffer and implement a char driver to provide 
     read/write ops on that buffer. write test applications to test read/write ops

Note: Use copy_to/copy_from kernel helper routines transfer data to/from driver buffer  to applications

  Task breakup

	1. write  a kernel module that registers a new char driver
	2. implement open/release/read/write operations in char driver
        3. allocate 1024 bytes of buffer for drivers use
	4. use copy_from_user/copy_to_user in read and write calls of driver
	5. write an application to write 100 bytes of data into driver buffer
	6. write an application that reads 100 bytes of data from driver buffer
--------------------------------------------------------------------------------------------
ex2: Allocate 2 kernel buffers of 1024 bytes each(DEVBUFA, DEVBUFB)implement a 
     char driver  that maps DEVBUFA to /dev/bufa  and DEVBUFB to /dev/bufb. 
     Driver should provide support for read/write operations.

Note: Register char driver using dynamic major no's

Task Breakup: 
  
       1. allocate buffer blocks DEVBUFA, and DEVBUFB
       2. register char driver with dynamic major no and 2 minor no's
       3. Implement read and write functions to print minor no associated with request path into dmesg buffer.
       4. Extend driver's read/write routines to transfer data b/w appropriate device buffer and 
	  application as per minor no in the request path. 
-------------------------------------------------------------------------------------------

ex3: Register/Unregister a char driver using helper functions register_chrdev & 
     unregister_chrdev   

Note: Access helper function documentation from kernel source tree using ctags
      (vim -t __register_chrdev)

--------------------------------------------------------------------------------------------
ex4: write a char driver that implements open,release, and ioctl functions.
      Implement ioctl routine to support READ and WRITE commands, that read or 
      write data from/to kernel buffer of size 1024 bytes.

      write an application that uses ioctl api, and execute read, write operations on
      char driver.

Task Breakup :
	
	1. implement a header file and declare ioctl request codes for read/write.
	2. register char driver with ioctl support.
	3. implement ioctl function in driver with READ, WRITE commands.
	4. write application to test ioctl commands.
--------------------------------------------------------------------------------------

ex 5: Implement char driver that supports open, release, and ioctl operations on
      Advanced Programmable Interrupt Controller(IOAPIC).

      Implement ioctl Operations for the following

	1. APIC_GETID  		: returns identification no of Apic
	2. APIC_GETIRQS		: returns no of irq pins on APIC 
	3. APIC_GETIRQSTATUS	: returns irq pin status (enabled, disabled)
	4: APIC_GETIRQTYPE	: returns irq pin signal type

      write a test application to initiate and verify above commands.

 
